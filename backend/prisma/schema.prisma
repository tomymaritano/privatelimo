// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  CLIENT
  DRIVER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum DocumentType {
  DNI
  PASSPORT
  LICENSE
}

enum BackgroundCheckStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DriverStatus {
  AVAILABLE
  BUSY
  OFFLINE
}

enum VehicleCategory {
  SEDAN
  SUV
  VAN
  LUXURY
}

enum VehicleStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
}

enum RuleType {
  SURGE
  DISCOUNT
  TIME_BASED
  ZONE_BASED
}

enum QuotationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  DRIVER_ASSIGNED
  DRIVER_ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CancelledBy {
  CLIENT
  DRIVER
  ADMIN
  SYSTEM
}

enum PaymentGateway {
  MERCADOPAGO
  STRIPE
  CASH
  TRANSFER
}

enum NotificationType {
  BOOKING_CONFIRMED
  DRIVER_ASSIGNED
  DRIVER_ARRIVED
  TRIP_COMPLETED
  PAYMENT_RECEIVED
}

enum NotificationChannel {
  EMAIL
  SMS
  WHATSAPP
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum CompanyStatus {
  ACTIVE
  SUSPENDED
  CLOSED
}

enum DriverEarningStatus {
  PENDING
  PAID
}

// Models
model User {
  id            String      @id @default(uuid())
  email         String      @unique
  phone         String      @unique
  passwordHash  String      @map("password_hash")
  role          UserRole
  status        UserStatus  @default(ACTIVE)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  deletedAt     DateTime?   @map("deleted_at")

  // Relations
  profile           Profile?
  driver            Driver?
  bookingsAsClient  Booking[]        @relation("ClientBookings")
  payments          Payment[]
  notifications     Notification[]
  reviewsGiven      Review[]         @relation("ReviewsGiven")
  reviewsReceived   Review[]         @relation("ReviewsReceived")
  quotations        Quotation[]
  promocodeUsages   UserPromocode[]
  companyUser       CompanyUser?
  auditLogs         AuditLog[]

  @@index([email])
  @@index([phone])
  @@index([role])
  @@map("users")
}

model Profile {
  id                    String       @id @default(uuid())
  userId                String       @unique @map("user_id")
  firstName             String       @map("first_name")
  lastName              String       @map("last_name")
  documentType          DocumentType @map("document_type")
  documentNumber        String       @map("document_number")
  birthDate             DateTime?    @map("birth_date")
  address               String?
  city                  String?
  state                 String?
  country               String?
  zipCode               String?      @map("zip_code")
  profileImageUrl       String?      @map("profile_image_url")
  emergencyContactName  String?      @map("emergency_contact_name")
  emergencyContactPhone String?      @map("emergency_contact_phone")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Driver {
  id                    String                @id @default(uuid())
  userId                String                @unique @map("user_id")
  licenseNumber         String                @unique @map("license_number")
  licenseExpiry         DateTime              @map("license_expiry")
  licenseImageUrl       String?               @map("license_image_url")
  backgroundCheckStatus BackgroundCheckStatus @default(PENDING) @map("background_check_status")
  backgroundCheckDate   DateTime?             @map("background_check_date")
  rating                Decimal               @default(5.0) @db.Decimal(2, 1)
  totalTrips            Int                   @default(0) @map("total_trips")
  status                DriverStatus          @default(OFFLINE)
  currentLocationLat    Decimal?              @map("current_location_lat") @db.Decimal(10, 8)
  currentLocationLng    Decimal?              @map("current_location_lng") @db.Decimal(11, 8)
  lastLocationUpdate    DateTime?             @map("last_location_update")
  bankAccountInfo       Json?                 @map("bank_account_info")
  commissionRate        Decimal               @default(0.20) @map("commission_rate") @db.Decimal(5, 2)
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")

  // Relations
  user            User              @relation(fields: [userId], references: [id])
  vehicles        Vehicle[]
  bookings        Booking[]
  earnings        DriverEarning[]
  trackingHistory TrackingHistory[]

  @@index([status])
  @@map("drivers")
}

model Vehicle {
  id                   String          @id @default(uuid())
  driverId             String?         @map("driver_id")
  brand                String
  model                String
  year                 Int
  licensePlate         String          @unique @map("license_plate")
  color                String
  category             VehicleCategory
  capacityPassengers   Int             @map("capacity_passengers")
  capacityLuggage      Int             @map("capacity_luggage")
  features             Json?
  insurancePolicyNumber String         @map("insurance_policy_number")
  insuranceExpiry      DateTime        @map("insurance_expiry")
  inspectionDate       DateTime        @map("inspection_date")
  inspectionExpiry     DateTime        @map("inspection_expiry")
  status               VehicleStatus   @default(ACTIVE)
  images               Json?
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime        @updatedAt @map("updated_at")

  // Relations
  driver   Driver?   @relation(fields: [driverId], references: [id])
  bookings Booking[]

  @@index([status])
  @@index([category])
  @@map("vehicles")
}

model Service {
  id                     String   @id @default(uuid())
  name                   String
  slug                   String   @unique
  description            String?  @db.Text
  basePrice              Decimal  @map("base_price") @db.Decimal(10, 2)
  pricePerKm             Decimal  @map("price_per_km") @db.Decimal(10, 2)
  pricePerMinute         Decimal  @map("price_per_minute") @db.Decimal(10, 2)
  minimumDistanceKm      Decimal  @map("minimum_distance_km") @db.Decimal(10, 2)
  minimumDurationMinutes Int      @map("minimum_duration_minutes")
  maxPassengers          Int      @map("max_passengers")
  vehicleCategories      Json     @map("vehicle_categories")
  isActive               Boolean  @default(true) @map("is_active")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  // Relations
  pricingRules PricingRule[]
  quotations   Quotation[]
  bookings     Booking[]

  @@map("services")
}

model PricingRule {
  id          String    @id @default(uuid())
  serviceId   String    @map("service_id")
  ruleType    RuleType  @map("rule_type")
  name        String
  conditions  Json
  multiplier  Decimal   @db.Decimal(5, 2)
  fixedAmount Decimal?  @map("fixed_amount") @db.Decimal(10, 2)
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  isActive    Boolean   @default(true) @map("is_active")
  priority    Int       @default(0)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  service Service @relation(fields: [serviceId], references: [id])

  @@map("pricing_rules")
}

model Quotation {
  id                  String          @id @default(uuid())
  userId              String?         @map("user_id")
  serviceId           String          @map("service_id")
  pickupAddress       String          @map("pickup_address")
  pickupLat           Decimal         @map("pickup_lat") @db.Decimal(10, 8)
  pickupLng           Decimal         @map("pickup_lng") @db.Decimal(11, 8)
  dropoffAddress      String          @map("dropoff_address")
  dropoffLat          Decimal         @map("dropoff_lat") @db.Decimal(10, 8)
  dropoffLng          Decimal         @map("dropoff_lng") @db.Decimal(11, 8)
  distanceKm          Decimal         @map("distance_km") @db.Decimal(10, 2)
  durationMinutes     Int             @map("duration_minutes")
  basePrice           Decimal         @map("base_price") @db.Decimal(10, 2)
  distancePrice       Decimal         @map("distance_price") @db.Decimal(10, 2)
  timePrice           Decimal         @map("time_price") @db.Decimal(10, 2)
  surgePrice          Decimal         @map("surge_price") @db.Decimal(10, 2)
  discounts           Decimal         @db.Decimal(10, 2)
  totalPrice          Decimal         @map("total_price") @db.Decimal(10, 2)
  priceBreakdown      Json            @map("price_breakdown")
  requestedDate       DateTime        @map("requested_date")
  passengerCount      Int             @map("passenger_count")
  specialRequirements String?         @map("special_requirements") @db.Text
  status              QuotationStatus @default(PENDING)
  expiresAt           DateTime        @map("expires_at")
  createdAt           DateTime        @default(now()) @map("created_at")

  // Relations
  user     User?     @relation(fields: [userId], references: [id])
  service  Service   @relation(fields: [serviceId], references: [id])
  bookings Booking[]

  @@map("quotations")
}

model Booking {
  id                    String         @id @default(uuid())
  userId                String         @map("user_id")
  driverId              String?        @map("driver_id")
  vehicleId             String?        @map("vehicle_id")
  serviceId             String         @map("service_id")
  quotationId           String?        @map("quotation_id")
  bookingCode           String         @unique @map("booking_code")
  pickupAddress         String         @map("pickup_address")
  pickupLat             Decimal        @map("pickup_lat") @db.Decimal(10, 8)
  pickupLng             Decimal        @map("pickup_lng") @db.Decimal(11, 8)
  dropoffAddress        String         @map("dropoff_address")
  dropoffLat            Decimal        @map("dropoff_lat") @db.Decimal(10, 8)
  dropoffLng            Decimal        @map("dropoff_lng") @db.Decimal(11, 8)
  scheduledPickupTime   DateTime       @map("scheduled_pickup_time")
  actualPickupTime      DateTime?      @map("actual_pickup_time")
  estimatedArrivalTime  DateTime?      @map("estimated_arrival_time")
  actualArrivalTime     DateTime?      @map("actual_arrival_time")
  distanceKm            Decimal        @map("distance_km") @db.Decimal(10, 2)
  durationMinutes       Int            @map("duration_minutes")
  basePrice             Decimal        @map("base_price") @db.Decimal(10, 2)
  finalPrice            Decimal        @map("final_price") @db.Decimal(10, 2)
  surgeMultiplier       Decimal        @default(1.0) @map("surge_multiplier") @db.Decimal(5, 2)
  paymentMethod         PaymentMethod  @map("payment_method")
  paymentStatus         PaymentStatus  @default(PENDING) @map("payment_status")
  status                BookingStatus  @default(PENDING)
  cancellationReason    String?        @map("cancellation_reason")
  cancelledBy           CancelledBy?   @map("cancelled_by")
  ratingDriver          Int?           @map("rating_driver")
  ratingClient          Int?           @map("rating_client")
  driverNotes           String?        @map("driver_notes") @db.Text
  clientNotes           String?        @map("client_notes") @db.Text
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt @map("updated_at")

  // Relations
  user            User              @relation("ClientBookings", fields: [userId], references: [id])
  driver          Driver?           @relation(fields: [driverId], references: [id])
  vehicle         Vehicle?          @relation(fields: [vehicleId], references: [id])
  service         Service           @relation(fields: [serviceId], references: [id])
  quotation       Quotation?        @relation(fields: [quotationId], references: [id])
  payments        Payment[]
  driverEarnings  DriverEarning[]
  trackingHistory TrackingHistory[]
  reviews         Review[]
  userPromocodes  UserPromocode[]

  @@index([userId])
  @@index([driverId])
  @@index([status])
  @@index([scheduledPickupTime])
  @@map("bookings")
}

model Payment {
  id               String         @id @default(uuid())
  bookingId        String         @map("booking_id")
  userId           String         @map("user_id")
  amount           Decimal        @db.Decimal(10, 2)
  currency         String         @default("USD")
  paymentMethod    PaymentGateway @map("payment_method")
  gatewayPaymentId String?        @map("gateway_payment_id")
  gatewayResponse  Json?          @map("gateway_response")
  status           PaymentStatus  @default(PENDING)
  processedAt      DateTime?      @map("processed_at")
  refundAmount     Decimal?       @map("refund_amount") @db.Decimal(10, 2)
  refundReason     String?        @map("refund_reason")
  refundedAt       DateTime?      @map("refunded_at")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([bookingId])
  @@index([status])
  @@index([gatewayPaymentId])
  @@map("payments")
}

model DriverEarning {
  id               String              @id @default(uuid())
  driverId         String              @map("driver_id")
  bookingId        String              @map("booking_id")
  grossAmount      Decimal             @map("gross_amount") @db.Decimal(10, 2)
  commissionRate   Decimal             @map("commission_rate") @db.Decimal(5, 2)
  commissionAmount Decimal             @map("commission_amount") @db.Decimal(10, 2)
  netAmount        Decimal             @map("net_amount") @db.Decimal(10, 2)
  tips             Decimal             @default(0) @db.Decimal(10, 2)
  bonuses          Decimal             @default(0) @db.Decimal(10, 2)
  deductions       Decimal             @default(0) @db.Decimal(10, 2)
  finalAmount      Decimal             @map("final_amount") @db.Decimal(10, 2)
  paymentStatus    DriverEarningStatus @default(PENDING) @map("payment_status")
  paymentDate      DateTime?           @map("payment_date")
  paymentReference String?             @map("payment_reference")
  createdAt        DateTime            @default(now()) @map("created_at")

  // Relations
  driver  Driver  @relation(fields: [driverId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("driver_earnings")
}

model Notification {
  id        String              @id @default(uuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  title     String
  message   String              @db.Text
  data      Json?
  status    NotificationStatus  @default(PENDING)
  sentAt    DateTime?           @map("sent_at")
  readAt    DateTime?           @map("read_at")
  createdAt DateTime            @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model TrackingHistory {
  id              String   @id @default(uuid())
  bookingId       String   @map("booking_id")
  driverId        String   @map("driver_id")
  lat             Decimal  @db.Decimal(10, 8)
  lng             Decimal  @db.Decimal(11, 8)
  speedKmh        Decimal? @map("speed_kmh") @db.Decimal(5, 2)
  heading         Int?
  accuracyMeters  Decimal? @map("accuracy_meters") @db.Decimal(5, 2)
  recordedAt      DateTime @default(now()) @map("recorded_at")

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id])
  driver  Driver  @relation(fields: [driverId], references: [id])

  @@index([bookingId])
  @@index([recordedAt])
  @@map("tracking_history")
}

model Review {
  id         String   @id @default(uuid())
  bookingId  String   @map("booking_id")
  reviewerId String   @map("reviewer_id")
  reviewedId String   @map("reviewed_id")
  rating     Int
  comment    String?  @db.Text
  isPublic   Boolean  @default(true) @map("is_public")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  booking  Booking @relation(fields: [bookingId], references: [id])
  reviewer User    @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewed User    @relation("ReviewsReceived", fields: [reviewedId], references: [id])

  @@map("reviews")
}

model Zone {
  id                 String   @id @default(uuid())
  name               String
  slug               String   @unique
  polygon            Json
  surchargePercentage Decimal? @map("surcharge_percentage") @db.Decimal(5, 2)
  surchargeFixed     Decimal? @map("surcharge_fixed") @db.Decimal(10, 2)
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@map("zones")
}

model Promocode {
  id                String           @id @default(uuid())
  code              String           @unique
  description       String?
  discountType      DiscountType     @map("discount_type")
  discountValue     Decimal          @map("discount_value") @db.Decimal(10, 2)
  minimumAmount     Decimal?         @map("minimum_amount") @db.Decimal(10, 2)
  maximumDiscount   Decimal?         @map("maximum_discount") @db.Decimal(10, 2)
  usageLimit        Int?             @map("usage_limit")
  usageCount        Int              @default(0) @map("usage_count")
  userLimitPerCode  Int?             @map("user_limit_per_code")
  validFrom         DateTime         @map("valid_from")
  validUntil        DateTime         @map("valid_until")
  serviceIds        Json?            @map("service_ids")
  isActive          Boolean          @default(true) @map("is_active")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  // Relations
  userPromocodes UserPromocode[]

  @@map("promocodes")
}

model UserPromocode {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  promocodeId     String   @map("promocode_id")
  bookingId       String   @map("booking_id")
  discountApplied Decimal  @map("discount_applied") @db.Decimal(10, 2)
  usedAt          DateTime @default(now()) @map("used_at")

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  promocode Promocode @relation(fields: [promocodeId], references: [id])
  booking   Booking   @relation(fields: [bookingId], references: [id])

  @@map("user_promocodes")
}

model CompanyAccount {
  id                String        @id @default(uuid())
  name              String
  taxId             String        @unique @map("tax_id")
  billingAddress    String        @map("billing_address") @db.Text
  billingEmail      String        @map("billing_email")
  creditLimit       Decimal       @map("credit_limit") @db.Decimal(10, 2)
  currentBalance    Decimal       @default(0) @map("current_balance") @db.Decimal(10, 2)
  paymentTermsDays  Int           @map("payment_terms_days")
  discountPercentage Decimal?     @map("discount_percentage") @db.Decimal(5, 2)
  status            CompanyStatus @default(ACTIVE)
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  // Relations
  companyUsers CompanyUser[]

  @@map("company_accounts")
}

model CompanyUser {
  id            String   @id @default(uuid())
  companyId     String   @map("company_id")
  userId        String   @unique @map("user_id")
  isAdmin       Boolean  @default(false) @map("is_admin")
  spendingLimit Decimal? @map("spending_limit") @db.Decimal(10, 2)
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  company CompanyAccount @relation(fields: [companyId], references: [id])
  user    User           @relation(fields: [userId], references: [id])

  @@map("company_users")
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  action     String
  entityType String   @map("entity_type")
  entityId   String   @map("entity_id")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Setting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  description String?
  updatedBy   String   @map("updated_by")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("settings")
}